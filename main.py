from manager_token import GetManagerToken
import telebot
import sqlite3
from telebot import types
from channel_id import GetChannelId

bot_token = GetManagerToken()
bot = telebot.TeleBot(bot_token)

conn = sqlite3.connect('bot_manager_database.db')

users_dict = dict()
admin_dict = dict()
artist_confirmation = dict()
message_and_admin_dict = dict()

pers_dict = dict()


ban_string = "Your account has been banned"


def check_ban(message):
    user_id = message.chat.id
    conn = sqlite3.connect('bot_manager_database.db')
    cursor = conn.cursor()
    cursor.execute(f"SELECT * FROM banlist WHERE user_id = '{user_id}'")
    result = cursor.fetchall()
    conn.close()
    return result


def wrong_data(message):
    if check_user_language(message) == [('ru',)]:
        bot.send_message(message.chat.id, "‚ùå –í—ã –≤–≤–µ–ª–∏ –Ω–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞")
    elif check_user_language(message) == [('en',)]:
        bot.send_message(message.chat.id, "‚ùå You entered the wrong data, try again")

@bot.message_handler(commands=['help'])
def help(message):
    if check_ban(message):
        bot.send_message(message.chat.id, ban_string)
    else:
        if check_user_language(message) == [('ru',)]:
            bot.send_message(message.chat.id, '''‚ñ∂ –î–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã —Å –±–æ—Ç–æ–º –≤–≤–µ–¥–∏—Ç–µ /start
üåè–î–ª—è —Å–º–µ–Ω—ã —è–∑—ã–∫–∞ –≤–≤–µ–¥–∏—Ç–µ /language''')
            
        elif check_user_language(message) == [('en',)]:
            bot.send_message(message.chat.id, '''‚ñ∂ To start working with the bot, type /start
üåèTo change the language type /language''')


# –í—ã–±–æ—Ä —è–∑—ã–∫–∞ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–∞–ø–Ω–∏—è –±–æ—Ç–∞, –∏–Ω—Ñ–æ–æ—Ä–º–∞—Ü–∏—è –æ –≤—ã–±–æ—Ä–µ –∑–∞–Ω–æ—Å–∏—Ç—å—Å—è –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
@bot.message_handler(commands=['language'])
def language(message):
    if check_ban(message):
        bot.send_message(message.chat.id, ban_string)
    else:
        markup = types.InlineKeyboardMarkup()
        ru_button = types.InlineKeyboardButton('üá∑üá∫ –†—É—Å—Å–∫–∏–π', callback_data='ru_button')
        en_button = types.InlineKeyboardButton('üá¨üáß English', callback_data='en_button')
        markup.add(ru_button, en_button)
        bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫ \nChoose language ‚§µ", reply_markup=markup)


@bot.callback_query_handler(func=lambda call: call.data in ['ru_button', 'en_button'])
def language_callback_handler(call):
    if check_ban(call.message):
        bot.send_message(call.message.chat.id, ban_string)
    else:
        conn = sqlite3.connect('bot_manager_database.db')
        cursor = conn.cursor()
        cursor.execute(f"SELECT * FROM language WHERE user_id = '{call.message.chat.id}'")
        existing_language = cursor.fetchone()
        if call.data == 'ru_button':
            bot.answer_callback_query(call.id)
            bot.send_message(call.message.chat.id, "‚úîÔ∏è –í—ã –≤—ã–±—Ä–∞–ª–∏ —Ä—É—Å—Å–∫–∏–π —è–∑—ã–∫")
            if existing_language:
                # –ï—Å–ª–∏ –∑–∞–ø–∏—Å—å —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –æ–±–Ω–æ–≤–ª—è–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ language
                cursor.execute(f"UPDATE language SET language = 'ru' WHERE user_id = '{call.message.chat.id}'")
            else:
                # –ò–Ω–∞—á–µ, –¥–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å
                cursor.execute(f"INSERT INTO language (user_id, language) VALUES ('{call.message.chat.id}', 'ru')")
            
            conn.commit()
            conn.close()
        elif call.data == 'en_button':
            bot.answer_callback_query(call.id)
            bot.send_message(call.message.chat.id, "‚úîÔ∏è You have chosen English ")

            if existing_language:
                # –ï—Å–ª–∏ –∑–∞–ø–∏—Å—å —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –æ–±–Ω–æ–≤–ª—è–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ language
                cursor.execute(f"UPDATE language SET language = 'en' WHERE user_id = '{call.message.chat.id}'")
            else:
                # –ò–Ω–∞—á–µ, –¥–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å
                cursor.execute(f"INSERT INTO language (user_id, language) VALUES ('{call.message.chat.id}', 'en')")

            conn.commit()
            conn.close()

        bot.edit_message_reply_markup(chat_id=call.message.chat.id, message_id=call.message.message_id)
        user_language = check_user_language(call.message)
        # Language is already set, proceed with the main functionality
        handle_start_with_language(call.message, user_language[0][0])

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
def check_user_language(message, artist_id = None):
    if artist_id == None:
        user_id = message.chat.id
    else:
        user_id = artist_id
    conn = sqlite3.connect('bot_manager_database.db')
    cursor = conn.cursor()
    cursor.execute(f"SELECT language FROM language WHERE user_id = '{user_id}'")
    result = cursor.fetchall()
    conn.close()
    return result


@bot.message_handler(commands=['start'])
def start(message):
    if check_ban(message):
        bot.send_message(message.chat.id, ban_string)
    else:
        user_language = check_user_language(message)
        if user_language:
            # Language is already set, proceed with the main functionality
            handle_start_with_language(message, user_language[0][0])
        else:
            # Language is not set, ask the user to choose a language
            language(message)


def handle_start_with_language(message, language):
    if language == 'ru':
        markup1 = types.InlineKeyboardMarkup()
        start_button = types.InlineKeyboardButton('–ù–∞—á–Ω–µ–º', callback_data='start_button')
        markup1.add(start_button)
        bot.send_message(message.chat.id, '''–í–∞—Å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ—Ç ‚≠ê StarManager - –≤–∞—à –≤–µ—Ä–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫ –≤ —Å—Ñ–µ—Ä–µ –º—É–∑—ã–∫–∞–ª—å–Ω–æ–≥–æ –º–µ–Ω–µ–¥–∂–º–µ–Ω—Ç–∞ –∏ –ø—Ä–æ–¥–≤–∏–∂–µ–Ω–∏—è –≤–∞—à–µ–π –º—É–∑—ã–∫–∏ üìà\n
–° –ø–æ–º–æ—â—å—é –±–æ—Ç–∞, –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ–ª—É—á–∏—Ç—å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –ø–æ –º—É–∑—ã–∫–µ –∏ –≤—ã–±—Ä–∞—Ç—å –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã–µ —É—Å–ª–æ–≤–∏—è –¥–ª—è —Å–æ—Ç—Ä—É–¥–Ω–∏—á–µ—Å—Ç–≤–∞ üì®''',
                         reply_markup=markup1)
    elif language == 'en':
        markup1 = types.InlineKeyboardMarkup()
        start_button = types.InlineKeyboardButton('Let\'s start', callback_data='start_button')
        markup1.add(start_button)
        bot.send_message(message.chat.id, '''Welcome to ‚≠ê StarManager - your faithful assistant in the field of music management and promotion of your music üìà\n
With the help of the bot, you can get music offers and choose the best conditions for cooperation üì®''',
                         reply_markup=markup1)


@bot.callback_query_handler(func=lambda call: call.data in ['start_button', 'to_start_callback_handler_button'])
def start_callback_handler(call):
    if check_ban(call.message):
        bot.send_message(call.message.chat.id, ban_string)
    else:
        # –°–æ–∑–¥–∞–µ–º –ø–∞–Ω–µ–ª—å
        markup2 = types.InlineKeyboardMarkup()
        # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫—É
        if check_user_language(call.message) == [('ru',)]:
            client_button = types.InlineKeyboardButton('üíº –ö–ª–∏–µ–Ω—Ç', callback_data='client_button')
            artist_button = types.InlineKeyboardButton('üéµ –ê—Ä—Ç–∏—Å—Ç', callback_data='artist_button')
            markup2.add(client_button, artist_button)
            bot.send_message(call.message.chat.id, "–ö–∞–∫ –≤—ã —Ö–æ—Ç–∏—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–æ—Ç–∞ ‚ùî", reply_markup=markup2)
        elif check_user_language(call.message) == [('en',)]:
            client_button = types.InlineKeyboardButton('üíº Client', callback_data='client_button')
            artist_button = types.InlineKeyboardButton('üéµ Artist', callback_data='artist_button')
            markup2.add(client_button, artist_button)
            bot.send_message(call.message.chat.id, "How you want use bot ‚ùî", reply_markup=markup2)
        # –¥–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –Ω–∞ –ø–∞–Ω–µ–ª—å

        bot.answer_callback_query(call.id)

        bot.edit_message_reply_markup(chat_id=call.message.chat.id, message_id=call.message.message_id)


@bot.callback_query_handler(func=lambda call: call.data == 'client_button')
def client_callback_handler(call):
    if check_ban(call.message):
        bot.send_message(call.message.chat.id, ban_string)
    else:
        bot.answer_callback_query(call.id)

        bot.edit_message_reply_markup(chat_id=call.message.chat.id, message_id=call.message.message_id)

        # –°–æ–∑–¥–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
        conn = sqlite3.connect('bot_manager_database.db')

        # –ü–æ–ª—É—á–∞–µ–º –∫—É—Ä—Å–æ—Ä –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è SQL-–∑–∞–ø—Ä–æ—Å–æ–≤
        cursor = conn.cursor()
        cursor.execute("SELECT * FROM artists")
        artists = cursor.fetchall()

        # –°–æ–∑–¥–∞–µ–º –ø–∞–Ω–µ–ª—å
        markup3 = types.InlineKeyboardMarkup()

        # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∞—Ä—Ç–∏—Å—Ç–∞
        for artist in artists:
            artist_button = types.InlineKeyboardButton(artist[1],
                                                       callback_data=f"arrrrartist_{artist[1]}")  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∏–º—è –∞—Ä—Ç–∏—Å—Ç–∞ –≤ –∫–∞—á–µ—Å—Ç–≤–µ callback_data
            markup3.add(artist_button)

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø–∞–Ω–µ–ª—å—é –∫–Ω–æ–ø–æ–∫
    if check_user_language(call.message) == [('ru',)]:
        end_button = types.InlineKeyboardButton("‚¨Ö –ù–∞–∑–∞–¥", callback_data=f"to_start_callback_handler_button")
        markup3.add(end_button)
        bot.send_message(call.message.chat.id, "üé∂ –í—ã–±–µ—Ä–∏—Ç–µ –∞—Ä—Ç–∏—Å—Ç–∞", reply_markup=markup3)

    elif check_user_language(call.message) == [('en',)]:
        end_button = types.InlineKeyboardButton("‚¨Ö Back", callback_data=f"to_start_callback_handler_button")
        markup3.add(end_button)
        bot.send_message(call.message.chat.id, "üé∂ Choose an artist", reply_markup=markup3)

        # –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
        conn.close()


@bot.callback_query_handler(func=lambda call: call.data.startswith('arrrrartist_'))
def artist_callback_handler(call):
    if check_ban(call.message):
        bot.send_message(call.message.chat.id, ban_string)
    else:
        bot.edit_message_reply_markup(chat_id=call.message.chat.id, message_id=call.message.message_id)
        artist_name = call.data.split('_')[1]
        if check_user_language(call.message) == [('ru',)]:
            bot.send_message(call.message.chat.id, f"–í—ã –≤—ã–±—Ä–∞–ª–∏ –∞—Ä—Ç–∏—Å—Ç–∞: {artist_name}. –ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ üî¢")
        elif check_user_language(call.message) == [('en',)]:
            bot.send_message(call.message.chat.id, f"You choose artist: {artist_name}. Write your phone number üî¢")
        bot.register_next_step_handler(call.message, handle_phone_user_message, artist_name)


def handle_phone_user_message(message, artist_name):
    if check_ban(message):
        bot.send_message(message.chat.id, ban_string)
    else:
        try:
            if message.text is None or '/' in message.text:
                wrong_data(message)
                bot.register_next_step_handler(message, handle_phone_user_message, artist_name)
            else:
                phone_number = message.text
                if phone_number.isdigit():
                    if check_user_language(message) == [('ru',)]:
                        bot.send_message(message.chat.id, "–û—Ç–ª–∏—á–Ω–æ. –ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à–µ –§–ò–û üî†")
                    elif check_user_language(message) == [('en',)]:
                        bot.send_message(message.chat.id, "Great. Write your full name üî†")
                    bot.register_next_step_handler(message, handle_name_user_message, artist_name, phone_number)
                else:
                    wrong_data(message)
                    bot.register_next_step_handler(message, handle_phone_user_message, artist_name)


        except:
            markup3 = types.InlineKeyboardMarkup()
            end_button = types.InlineKeyboardButton("‚¨Ö –ù–∞–∑–∞–¥", callback_data=f"arrrrartist_")
            markup3.add(end_button)
            wrong_data(message)


def handle_name_user_message(message, artist_name, phone_number):
    if check_ban(message):
        bot.send_message(message.chat.id, ban_string)
    else:
        try:
            if message.text == None or '/' in message.text:
                wrong_data(message)
                bot.register_next_step_handler(message, handle_name_user_message, artist_name, phone_number)
            else:
                name = message.text
                if check_user_language(message) == [('ru',)]:
                    bot.send_message(message.chat.id, "–í–µ–ª–∏–∫–æ–ª–µ–ø–Ω–æ. –ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ üìù")
                elif check_user_language(message) == [('en',)]:
                    bot.send_message(message.chat.id, "Perfectly. Write your message üìù")
                bot.register_next_step_handler(message, handle_pers_message, artist_name, phone_number, name)
        except:
            wrong_data(message)
            # –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ–±—Ä–∞—Ç–Ω–æ –Ω–∞ —Ñ—É–Ω–∫—Ü–∏—é handle_name_user_message()
            bot.register_next_step_handler(message, handle_name_user_message, artist_name, phone_number)


def handle_pers_message(message, artist_name, phone_number, name):
    if check_ban(message):
        bot.send_message(message.chat.id, ban_string)
    else:
        try:
            if message.text is None or '/' in message.text:
                wrong_data(message)
                # –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ–±—Ä–∞—Ç–Ω–æ –Ω–∞ —Ñ—É–Ω–∫—Ü–∏—é handle_name_user_message()
                bot.register_next_step_handler(message, handle_pers_message, artist_name, phone_number, name)
            else:
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∞—Ä—Ç–∏—Å—Ç—É

                user = message.from_user.username
                # –î–æ–±–∞–≤–ª—è–µ–º –≤—Å–µ –∑–Ω–∞—á–µ–Ω–∏—è –≤ —Å–ª–æ–≤–∞—Ä—å pers_dict
                global pers_dict

                pers_dict = {f'name_{user}': name, 'phone_number': phone_number, 'user': user, 'message': message.text,
                             'artist_name': artist_name}

                # –°–ø—Ä–∞—à–∏–≤–µ–º —Ä–∞–∑—Ä–µ—à–µ–µ–Ω–∏–µ –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
                markup4 = types.InlineKeyboardMarkup()
                yes_button = types.InlineKeyboardButton('‚úÖ', callback_data='pers_yes_button')
                #no_button = types.InlineKeyboardButton('‚ùå', callback_data='pers_no_button')
                markup4.add(yes_button)
                if check_user_language(message) == [('ru',)]:
                    bot.send_message(message.chat.id, "–í—ã —Å–æ–≥–ª–∞—Å–Ω—ã –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö?",
                                     reply_markup=markup4)
                elif check_user_language(message) == [('en',)]:
                    bot.send_message(message.chat.id, "Do you agree to the processing of personal data?",
                                     reply_markup=markup4)
        except:
           wrong_data(message)
           bot.register_next_step_handler(message, handle_pers_message, artist_name, phone_number, name)

@bot.callback_query_handler(func=lambda call: call.data.startswith('pers_yes_button'))
def pers_yes_callback_handler(call):
    if check_ban(call.message):
        bot.send_message(call.message.chat.id, ban_string)
    else:

        bot.answer_callback_query(call.id)
        bot.edit_message_reply_markup(chat_id=call.message.chat.id, message_id=call.message.message_id)
        artist_name = pers_dict['artist_name']
        message_user = pers_dict['message']
        phone_number_user = pers_dict['phone_number']
        user = pers_dict['user']
        name = pers_dict[f'name_{user}']
        send_message_to_artist(artist_name, message_user, phone_number_user, user, name)

        # –û—á–∏—Å—Ç–∫–∞ —Å–ª–æ–≤–∞—Ä—è
        pers_dict.clear()
        if check_user_language(call.message) == [('ru',)]:
            bot.send_message(call.message.chat.id, "–í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∞—Ä—Ç–∏—Å—Ç—É ‚úÖ")
        elif check_user_language(call.message) == [('en',)]:
            bot.send_message(call.message.chat.id,
                             "Your message has been sent to the artist ‚úÖ")


def send_message_to_artist(artist_name, message_text, phone_number, user, name):
    # –°–æ–∑–¥–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
    conn = sqlite3.connect('bot_manager_database.db')

    # –ü–æ–ª—É—á–∞–µ–º –∫—É—Ä—Å–æ—Ä –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è SQL-–∑–∞–ø—Ä–æ—Å–æ–≤
    cursor = conn.cursor()
    cursor.execute(f"SELECT * FROM artists WHERE artist_name = '{artist_name}'")
    artist = cursor.fetchone()
     
    artist_id = str(artist[2])

    if check_user_language(None, artist_id) == [('ru',)]:
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∞—Ä—Ç–∏—Å—Ç—É —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ username –∫–ª–∏–µ–Ω—Ç–∞ –∏ –µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–µ–º b –µ–≥–æ –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω–∞
        bot.send_message(artist_id, f"üì¶ –ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç @{user}:\n{message_text} üì¶\nüì± –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: {phone_number} \nüë®‚Äçüíª –§–ò–û: {name}")

    elif check_user_language(None, artist_id) == [('en',)]:
        bot.send_message(artist_id, f"üì¶ New Message by @{user}:\n{message_text} üì¶\nüì± Phone number: {phone_number} \nüë®‚Äçüíª Full name: {name}")
    # –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
    conn.close()


@bot.callback_query_handler(func=lambda call: call.data in ['artist_button', 'to_artist_name_callback_handler_button'])
def artist_name_callback_handler(call):
    if check_ban(call.message):
        bot.send_message(call.message.chat.id, ban_string)
    else:
        bot.answer_callback_query(call.id)
        bot.edit_message_reply_markup(chat_id=call.message.chat.id, message_id=call.message.message_id)

        markup_artist1 = types.InlineKeyboardMarkup()

        if check_user_language(call.message) == [('ru',)]:
            to_start_callback_handler_button = types.InlineKeyboardButton('‚¨Ö –ù–∞–∑–∞–¥',
                                                                          callback_data='to_start_callback_handler_button')
            markup_artist1.add(to_start_callback_handler_button)
            bot.send_message(call.message.chat.id,
                             "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è/–Ω–∏–∫–Ω–µ–π–º üî†\n–° –µ–≥–æ –ø–æ–º–æ—â—å—é –∫–ª–∏–µ–Ω—Ç—ã —Å–º–æ–≥—É—Ç –æ–±—Ä–∞—Ç–∏—Ç—å—Å—è –∫ –≤–∞–º üë®‚Äçüíª",
                             reply_markup=markup_artist1)
        elif check_user_language(call.message) == [('en',)]:
            to_start_callback_handler_button = types.InlineKeyboardButton('‚¨Ö Back',
                                                                          callback_data='to_start_callback_handler_button')
            markup_artist1.add(to_start_callback_handler_button)
            bot.send_message(call.message.chat.id,
                             "Enter your name / nickname üî†\nWith its help, clients will be able to contact you üë®‚Äçüíª",
                             reply_markup=markup_artist1)

        bot.register_next_step_handler(call.message, handle_artist_name)


@bot.callback_query_handler(func=lambda call: call.data == 'to_start_callback_handler_button')
def artist_back_callback_handler(call):
    if check_ban(call.message):
        bot.send_message(call.message.chat.id, ban_string)
    else:
        start_callback_handler(call)


def handle_artist_name(message):
    if check_ban(message):
        bot.send_message(message.chat.id, ban_string)
    else:
        if message.text is None or '/' in message.text:
            markup_artist3_1 = types.InlineKeyboardMarkup()
            if check_user_language(message) == [('ru',)]:
                to_artist_name_callback_handler_button = types.InlineKeyboardButton('‚¨Ö –ù–∞–∑–∞–¥',
                                                                                    callback_data='to_artist_name_callback_handler_button')
                markup_artist3_1.add(to_artist_name_callback_handler_button)
                bot.send_message(message.chat.id, "‚ö†      –æ—à–∏–±–∫–∞      ‚ö† \n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑",
                                 reply_markup=markup_artist3_1)
            if check_user_language(message) == [('en',)]:
                to_artist_name_callback_handler_button = types.InlineKeyboardButton('‚¨Ö Back',
                                                                                    callback_data='to_artist_name_callback_handler_button')
                markup_artist3_1.add(to_artist_name_callback_handler_button)
                bot.send_message(message.chat.id, "‚ö†error‚ö† \n Try again", reply_markup=markup_artist3_1)


        else:
            markup_artist2 = types.InlineKeyboardMarkup()
            if check_user_language(message) == [('ru',)]:
                to_artist_circle_callback_handler_button = types.InlineKeyboardButton('–í—Å–µ –≤–µ—Ä–Ω–æ ‚úÖ',
                                                                                      callback_data='to_artist_circle_callback_handler_button')
                to_artist_name_callback_handler_button = types.InlineKeyboardButton('–í–≤–µ—Å—Ç–∏ –µ—â–µ —Ä–∞–∑ ‚ùå',
                                                                                    callback_data='to_artist_name_callback_handler_button')
            elif check_user_language(message) == [('en',)]:
                to_artist_circle_callback_handler_button = types.InlineKeyboardButton('All right ‚úÖ',
                                                                                      callback_data='to_artist_circle_callback_handler_button')
                to_artist_name_callback_handler_button = types.InlineKeyboardButton('Enter again ‚ùå',
                                                                                    callback_data='to_artist_name_callback_handler_button')
            markup_artist2.add(to_artist_circle_callback_handler_button, to_artist_name_callback_handler_button)

            artist_name = message.text

            conn = sqlite3.connect('bot_manager_database.db')

            cursor = conn.cursor()
            cursor.execute(f"SELECT * FROM artists WHERE artist_name = '{artist_name}'")
            record = cursor.fetchone()
            if record is not None:
                markup_artist3_2 = types.InlineKeyboardMarkup()
                if check_user_language(message) == [('ru',)]:
                    to_artist_name_callback_handler_button = types.InlineKeyboardButton('–í–≤–µ—Å—Ç–∏ –µ—â–µ —Ä–∞–∑',
                                                                                        callback_data='to_artist_name_callback_handler_button')
                    markup_artist3_2.add(to_artist_name_callback_handler_button)
                    bot.send_message(message.chat.id, f'''–ê—Ä—Ç–∏—Å—Ç —Å –∏–º–µ–Ω–µ–º {artist_name} —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω . 
–ü–æ–º–Ω–∏—Ç–µ, —á—Ç–æ –ø—Ä–∏ –ø–æ–ø—ã—Ç–∫–µ –≤—ã–¥–∞—Ç—å —Å–µ–±—è –∑–∞ –¥—Ä—É–≥–æ–≥–æ —á–µ–ª–æ–≤–µ–∫–∞ –í—ã –±—É–¥–µ—Ç–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã –Ω–∞–≤—Å–µ–≥–¥–∞ üö´''',
                                     reply_markup=markup_artist3_2)
                elif check_user_language(message) == [('en',)]:
                    to_artist_name_callback_handler_button = types.InlineKeyboardButton('Enter again',
                                                                                        callback_data='to_artist_name_callback_handler_button')
                    markup_artist3_2.add(to_artist_name_callback_handler_button)
                    bot.send_message(message.chat.id,
                                     f'''The artist with the name {artist_name} is already registered. Remember that if you try to impersonate another person, you will be blocked forever üö´''')

            else:
                users_dict[message.chat.id] = artist_name
                if check_user_language(message) == [('ru',)]:
                    bot.send_message(message.chat.id, f"–í–∞—à–µ –∏–º—è {artist_name}, –Ω–µ —Ç–∞–∫ –ª–∏ ‚ùî",
                                     reply_markup=markup_artist2)
                elif check_user_language(message) == [('en',)]:
                    bot.send_message(message.chat.id, f"Your name is {artist_name}, isn't it ‚ùî",
                                     reply_markup=markup_artist2)
            conn.close()


@bot.callback_query_handler(func=lambda call: call.data == 'to_artist_circle_callback_handler_button')
def artist_circle_callback_handler(call):
    if check_ban(call.message):
        bot.send_message(call.message.chat.id, ban_string)
    else:
        bot.edit_message_reply_markup(chat_id=call.message.chat.id, message_id=call.message.message_id)
        if check_user_language(call.message) == [('ru',)]:
            bot.send_message(call.message.chat.id, f'''–î–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –≤–∞—à–µ–π –ª–∏—á–Ω–æ—Å—Ç–∏ ‚òë –≤–∞–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∑–∞–ø–∏—Å–∞—Ç—å –≤–∏–¥–µ–æ—Å–æ–æ–±—â–µ–Ω–∏–µ üé¨ —Å –≤–∞—à–∏–º –ª–∏—Ü–æ–º –∏ —Ñ—Ä–∞–∑–æ–π:\n
"–Ø - {users_dict[call.message.chat.id]}, —Ö–æ—á—É –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –¥–ª—è StarManagerBot".\n
–ü–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ –º—ã —É–≤–µ–¥–æ–º–∏–º –≤–∞—Å –æ–± —É—Å–ø–µ—à–Ω–æ–π —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.''')
        elif check_user_language(call.message) == [('en',)]:
            bot.send_message(call.message.chat.id,
                             f'''To confirm your identity ‚òë, you need to record a video message üé¨ with your face and the phrase:\n
I am {users_dict[call.message.chat.id]}, I want to confirm the registration for StarManagerboot."\n
After successful verification, we will notify you of successful registration.''')

        bot.register_next_step_handler(call.message, artist_handle_video)


def artist_handle_video(message):
    if check_ban(message):
        bot.send_message(message.chat.id, ban_string)
    else:
        try:
            channel_id = GetChannelId()
            response = bot.get_chat_members_count(channel_id)
            total_members = response - 1

            markup_admin = types.InlineKeyboardMarkup()
            confirmation_button = types.InlineKeyboardButton(f'‚úÖ 0/{total_members}',
                                                                callback_data=f'confirmation_button {message.chat.id} {users_dict[message.chat.id]} {message.from_user.username}')
            again_button = types.InlineKeyboardButton(f'üîÑ 0/{total_members}',
                                                        callback_data=f'again_button {message.chat.id} {users_dict[message.chat.id]} {message.from_user.username}')
            block_button = types.InlineKeyboardButton(f'‚ùå 0/{total_members}',
                                                        callback_data=f'block_button {message.chat.id} {users_dict[message.chat.id]} {message.from_user.username}')
            markup_admin.add(confirmation_button, again_button, block_button)

            message1 = bot.send_video_note(channel_id, message.video_note.file_id)
            message2 = bot.send_message(channel_id, f'''–ò–º—è: {users_dict[message.chat.id]}
Username: @{message.chat.username} 
User id: {message.chat.id}''', reply_markup=markup_admin)

            artist_confirmation[str(message.chat.id)] = [message1, message2]
        except:
            wrong_data(message)


def sollution(total_voted0, total_voted1, total_voted2, artist_id, artist_name, user_name, message1, message2):
    if total_voted0 > (total_voted1 + total_voted2):
        bot.edit_message_reply_markup(chat_id=GetChannelId(), message_id=message2.message_id)
        conn = sqlite3.connect('bot_manager_database.db')
        cursor = conn.cursor()
        if check_user_language(None, artist_id) == [('ru',)]:
            bot.send_message(artist_id,
                            "–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞‚úÖ –¢–µ–ø–µ—Ä—å –≤–∞–º –±—É–¥—É—Ç –ø—Ä–∏—Ö–æ–¥–∏—Ç—å –∫–æ–º–º–µ—Ä—á–µ—Å–∫–∏–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è.")
        elif check_user_language(None, artist_id) == [('en',)]:
            bot.send_message(artist_id,
                            "Registration has been successfully confirmed‚úÖ Now you will receive commercial offers.")
        cursor.execute('INSERT INTO artists (artist_name, artist_id) VALUES (?, ?)', (artist_name, artist_id))
        conn.commit()
        bot.send_message(GetChannelId(), "–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞ ‚úÖ")
    elif total_voted0 == (total_voted1 + total_voted2) or total_voted2 == (
            total_voted0 + total_voted1) or total_voted1 > (total_voted0 + total_voted2):
        bot.edit_message_reply_markup(chat_id=GetChannelId(), message_id=message2.message_id)
        markup_artist4 = types.InlineKeyboardMarkup()
        again_button = types.InlineKeyboardButton('–ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –µ—â—ë —Ä–∞–∑ üîÑ',
                                                  callback_data='to_artist_circle_callback_handler_button')
        markup_artist4.add(again_button)
        bot.send_message(GetChannelId(), "–ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞")
        if check_user_language(None, artist_id) == [('ru',)]:
            bot.send_message(artist_id,
                         "–í–∞—à–µ –≤–∏–¥–µ–æ—Å–æ–æ–±—â–µ–Ω–∏–µ –±—ã–ª–æ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–æ, –Ω–æ –Ω–∞–º –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –≤–∞—à—É –ª–∏—á–Ω–æ—Å—Ç—å üóø\n –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑ üîÑ",
                         reply_markup=markup_artist4)
        elif check_user_language(None, artist_id) == [('en',)]:
            bot.send_message(artist_id,
                         "Your video message has been reviewed, but we have not been able to confirm your identity üóø\n Please try again üîÑ",
                         reply_markup=markup_artist4)
        
    elif total_voted2 > (total_voted0 + total_voted1):
        bot.edit_message_reply_markup(chat_id=GetChannelId(), message_id=message2.message_id)
        conn = sqlite3.connect('bot_manager_database.db')
        cursor = conn.cursor()
        cursor.execute('INSERT INTO banlist (user_name, user_id) VALUES (?, ?)', (user_name, artist_id))
        conn.commit()
        conn.close()
        bot.send_message(GetChannelId(), "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω üö´")
        if check_user_language(None, artist_id) == [('ru',)]:
            bot.send_message(artist_id,
                         "–í–∞—à–µ –≤–∏–¥–µ–æ—Å–æ–æ–±—â–µ–Ω–∏–µ –±—ã–ª–æ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–æ. –í—ã –±—ã–ª–∏ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã –∑–∞ –ø–æ–ø—ã—Ç–∫—É –º–æ—à–µ–Ω–Ω–∏—á–µ—Å—Ç–≤–∞ üö´")
        elif check_user_language(None, artist_id) == [('en',)]:
            bot.send_message(artist_id,
                         "Your video message has been reviewed. You have been blocked for attempted fraud üö´")
    message2_id = message2.message_id
    del message_and_admin_dict[message2_id]


@bot.callback_query_handler(
    func=lambda call: call.data.split()[0] in ['confirmation_button', 'again_button', 'block_button'])
def admin_edit_markup(call):
    admin_id = str(call.from_user.id)

    artist_id = str(call.data.split()[1])
    artist_name = call.data.split()[2]
    user_name = call.data.split()[3]
    message1 = artist_confirmation[artist_id][0]
    message2 = artist_confirmation[artist_id][1]
    message2_id = message2.message_id
    if message2_id not in message_and_admin_dict:
        message_and_admin_dict[message2_id] = []
    if admin_id not in message_and_admin_dict[message2_id]:
        if message2.reply_markup and isinstance(message2.reply_markup, telebot.types.InlineKeyboardMarkup):
            for row in message2.reply_markup.keyboard:
                row_info = []
                for button in row:
                    button_info = {
                        'text': button.text,
                        'callback_data': button.callback_data
                    }
                    row_info.append(button_info)
                keyboard_info = row_info

        dict0 = keyboard_info[0]
        dict1 = keyboard_info[1]
        dict2 = keyboard_info[2]

        total_voted0 = int(dict0['text'].split()[1].split('/')[0])
        total_voted1 = int(dict1['text'].split()[1].split('/')[0])
        total_voted2 = int(dict2['text'].split()[1].split('/')[0])

        total_members = int(dict0['text'].split()[1].split('/')[1])

        callback_data0 = dict0['callback_data']
        callback_data1 = dict1['callback_data']
        callback_data2 = dict2['callback_data']

        if call.data.split()[0] == 'confirmation_button':
            markup = types.InlineKeyboardMarkup()
            confirmation_button = types.InlineKeyboardButton(f'‚úÖ {total_voted0 + 1}/{total_members}',
                                                             callback_data=callback_data0)
            again_button = types.InlineKeyboardButton(f'üîÑ {total_voted1}/{total_members}', callback_data=callback_data1)
            block_button = types.InlineKeyboardButton(f'‚ùå {total_voted2}/{total_members}', callback_data=callback_data2)
            markup.add(confirmation_button, again_button, block_button)
            artist_confirmation[artist_id][1] = bot.edit_message_reply_markup(chat_id=GetChannelId(),
                                                                              message_id=message2.message_id,
                                                                              reply_markup=markup)
            total_voted0 += 1
        elif call.data.split()[0] == 'again_button':
            markup = types.InlineKeyboardMarkup()
            confirmation_button = types.InlineKeyboardButton(f'‚úÖ {total_voted0}/{total_members}',
                                                             callback_data=callback_data0)
            again_button = types.InlineKeyboardButton(f'üîÑ {total_voted1 + 1}/{total_members}',
                                                      callback_data=callback_data1)
            block_button = types.InlineKeyboardButton(f'‚ùå {total_voted2}/{total_members}', callback_data=callback_data2)
            markup.add(confirmation_button, again_button, block_button)
            artist_confirmation[artist_id][1] = bot.edit_message_reply_markup(chat_id=GetChannelId(),
                                                                              message_id=message2.message_id,
                                                                              reply_markup=markup)
            total_voted1 += 1
        elif call.data.split()[0] == 'block_button':
            markup = types.InlineKeyboardMarkup()
            confirmation_button = types.InlineKeyboardButton(f'‚úÖ {total_voted0}/{total_members}',
                                                             callback_data=callback_data0)
            again_button = types.InlineKeyboardButton(f'üîÑ {total_voted1}/{total_members}', callback_data=callback_data1)
            block_button = types.InlineKeyboardButton(f'‚ùå {total_voted2 + 1}/{total_members}',
                                                      callback_data=callback_data2)
            markup.add(confirmation_button, again_button, block_button)
            artist_confirmation[artist_id][1] = bot.edit_message_reply_markup(chat_id=GetChannelId(),
                                                                              message_id=message2.message_id,
                                                                              reply_markup=markup)
            total_voted2 += 1

        total_voted = total_voted0 + total_voted1 + total_voted2

        message_and_admin_dict[message2_id].append(admin_id)

        if total_voted == total_members:
            sollution(total_voted0, total_voted1, total_voted2, artist_id, artist_name, user_name, message1, message2)

    else:
        bot.send_message(admin_id, "–ü—Ä–æ–≥–æ–ª–æ—Å–æ–≤–∞—Ç—å –º–æ–∂–Ω–æ —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ä–∞–∑ ‚ôø")


@bot.message_handler(commands=['unblock'])
def unblock(message):
    user_id = message.chat.id

    conn = sqlite3.connect('bot_manager_database.db')
    cursor = conn.cursor()
    cursor.execute(f"SELECT admin_id FROM admins")
    result = cursor.fetchall()

    admins_id = []
    for row in result:
        admins_id.append(row[0])

    conn.close()

    markup_admin_unblock = types.InlineKeyboardMarkup()
    unblock_user_id_buttton = types.InlineKeyboardButton('–í–≤–µ—Å—Ç–∏ ID', callback_data='to_unblock_user_id_buttton')
    unblock_user_name_button = types.InlineKeyboardButton('–í–≤–µ—Å—Ç–∏ username',
                                                          callback_data='to_unblock_user_name_button')
    markup_admin_unblock.add(unblock_user_id_buttton, unblock_user_name_button)

    if str(user_id) in admins_id:
        bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ", reply_markup=markup_admin_unblock)


@bot.callback_query_handler(func=lambda call: call.data == 'to_unblock_user_id_buttton')
def unblock_user_id(call):
    bot.edit_message_reply_markup(chat_id=call.message.chat.id, message_id=call.message.message_id)
    bot.send_message(call.message.chat.id, "–í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
    bot.register_next_step_handler(call.message, unblock_user_id_input)

@bot.callback_query_handler(func=lambda call: call.data == 'to_unblock_user_name_button')
def unblock_user_name(call):
    bot.edit_message_reply_markup(chat_id=call.message.chat.id, message_id=call.message.message_id)
    bot.send_message(call.message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
    bot.register_next_step_handler(call.message, unblock_user_name_input)

@bot.callback_query_handler(func=lambda call: call.data == 'to_back_unblock_button')
def back_unblock(call):
    bot.register_next_step_handler(call.message, unblock)

def unblock_user_id_input(message):
    user_id = message.text
    conn = sqlite3.connect('bot_manager_database.db')
    cursor = conn.cursor()
    cursor.execute(f"SELECT * FROM banlist WHERE user_id = '{user_id}'")
    result = cursor.fetchall()
    if result:
        user_id = result[0][2]
        cursor.execute(f"DELETE FROM banlist WHERE user_id = '{user_id}'")
        conn.commit()
        bot.send_message(message.chat.id, f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID {user_id} —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω")
    else:
        bot.send_message(message.chat.id, "–î–∞–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω")

    conn.close()

def unblock_user_name_input(message):
    user_name = message.text
    conn = sqlite3.connect('bot_manager_database.db')
    cursor = conn.cursor()
    cursor.execute(f"SELECT * FROM banlist WHERE user_name = '{user_name}'")
    result = cursor.fetchall()
    if result:
        user_id = result[0][2]
        cursor.execute(f"DELETE FROM banlist WHERE user_id = '{user_id}'")
        conn.commit()
        bot.send_message(message.chat.id, f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å –∏–º–µ–Ω–µ–º {user_name} —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω")
    else:
        bot.send_message(message.chat.id, "–î–∞–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω")

    conn.close()

bot.polling(none_stop=True)
